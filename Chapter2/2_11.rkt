#lang racket
(define (make-interval a b) (cons a b))
(define (lower-bound interval)
  (min (car interval) (cdr interval)))
(define (upper-bound interval)
  (max (car interval) (cdr interval)))

(define (mul-interval-original x y)
  (let ((p1 (* (lower-bound x) (lower-bound y)))
        (p2 (* (lower-bound x) (upper-bound y)))
        (p3 (* (upper-bound x) (lower-bound y)))
        (p4 (* (upper-bound x) (upper-bound y))))
    (make-interval (min p1 p2 p3 p4)
                   (max p1 p2 p3 p4))))

(define (mul-interval x y)
  (define (is-positive? x)
    (not (< x 0)))
  (define (is-negative? x)
    (< x 0))
  (cond ((and (is-positive? (lower-bound x)) (is-positive? (upper-bound x)) (is-positive? (lower-bound y)) (is-positive? (upper-bound y))) 
         (make-interval (* (lower-bound x) (lower-bound y)) (* (upper-bound x) (upper-bound y))))
        ((and (is-negative? (lower-bound x)) (is-positive? (upper-bound x)) (is-positive? (lower-bound y)) (is-positive? (upper-bound y))) 
         (make-interval (* (lower-bound x) (upper-bound y)) (* (upper-bound x) (upper-bound y))))
        ((and (is-negative? (lower-bound x)) (is-negative? (upper-bound x)) (is-positive? (lower-bound y)) (is-positive? (upper-bound y))) 
         (make-interval (* (lower-bound x) (upper-bound y)) (* (lower-bound y) (upper-bound x))))
        ((and (is-negative? (lower-bound x)) (is-positive? (upper-bound x)) (is-negative? (lower-bound y)) (is-negative? (upper-bound y))) 
         (make-interval (* (lower-bound y) (upper-bound x)) (* (lower-bound x) (lower-bound y))))
        ((and (is-negative? (lower-bound x)) (is-negative? (upper-bound x)) (is-negative? (lower-bound y)) (is-negative? (upper-bound y))) 
         (make-interval (* (upper-bound x) (upper-bound y)) (* (lower-bound x) (lower-bound y))))
        ((and (is-negative? (lower-bound x)) (is-positive? (upper-bound x)) (is-negative? (lower-bound y)) (is-positive? (upper-bound y))) 
         (make-interval (min (* (lower-bound x) (upper-bound y)) (* (upper-bound x) (lower-bound y))) 
                        (max (* (upper-bound x) (upper-bound y)) (* (lower-bound x) (lower-bound y)))))
        (else (mul-interval y x))))

(define a (make-interval -1 1))
(define b (make-interval -1 2))
(define c (make-interval 1 2))
(define d (make-interval 3 4))
(define e (make-interval -2 -1))
(define f (make-interval 3 4))
(mul-interval a b)
(mul-interval-original a b)
(mul-interval c d)
(mul-interval-original c d)
(mul-interval a c)
(mul-interval-original a c)
(mul-interval e c)
(mul-interval-original e c)
(mul-interval e a)
(mul-interval-original e a)
(mul-interval e e)
(mul-interval-original e e)

