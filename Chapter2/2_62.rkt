#lang racket
(define (element-of-set? x set)
  (cond ((null? set) false)
        ((= x (car set)) true)
        ((< x (car set)) false)
        (else (element-of-set? x (cdr set)))))

(define (adjoin-set x s2)
  (cond ((null? s2)
         (cons x '()))
        ((< x (car s2))
         (cons x s2))
        ((= x (car s2))
         s2)
        (else (cons (car s2) (adjoin-set x (cdr s2))))))
            
(define (union-set s1 s2)
  (cond ((null? s1) s2)
        ((null? s2) s1)
        ((< (car s1) (car s2))
         (cons (car s1) (union-set (cdr s1) s2)))
        ((= (car s1) (car s2))
         (cons (car s1) (union-set (cdr s1) (cdr s2))))
        (else (cons (car s2) (union-set s1 (cdr s2))))))

(define set1 (list 1 2 3))
(define set2 (list 3 4 5))
(define set3 (list 2 4 6))
(union-set set1 set2)
(union-set set1 set3)